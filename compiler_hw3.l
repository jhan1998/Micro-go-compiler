/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;
    extern int state;
    extern int condition_flag;
    extern int assign_flag;
    extern int assign_flag2;
    extern int if_for_flag;
    extern int else_flag;
    extern int if_flag;
    extern int for_flag;
    extern int scope_num;
    extern int num_if;
    extern int num_for;
    extern FILE *hw3;
    extern void insert_for(int);
    extern int top_for();

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
Str_lit  \".+\"

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}


"+"         { yylval.s_val = strdup("ADD"); return '+'; }
"-"         { yylval.s_val = strdup("SUB"); return '-'; }
"*"         { yylval.s_val = strdup("MUL"); return '*'; }
"/"         { yylval.s_val = strdup("QUO"); return '/'; }
"%"         { yylval.s_val = strdup("REM"); return '%'; }
"++"        { yylval.s_val = strdup("INC"); return INC; }
"--"        { yylval.s_val = strdup("DEC"); return DEC; }

">"         { yylval.s_val = strdup("GTR"); return '>'; }
"<"         { yylval.s_val = strdup("LSS"); return '<'; }
">="        { yylval.s_val = strdup("GEQ"); return GEQ; }
"<="        { yylval.s_val = strdup("LEQ"); return LEQ; }
"=="        { yylval.s_val = strdup("EQL"); return EQL; }
"!="        { yylval.s_val = strdup("NEQ"); return NEQ; }

"="         { assign_flag = 1; yylval.s_val = strdup("ASSIGN"); return '='; }
"+="        { yylval.s_val = strdup("ADD_ASSIGN"); return ADD_ASSIGN; }
"-="        { yylval.s_val = strdup("SUB_ASSIGN"); return SUB_ASSIGN; }
"*="        { yylval.s_val = strdup("MUL_ASSIGN"); return MUL_ASSIGN; }
"/="        { yylval.s_val = strdup("QUO_ASSIGN"); return QUO_ASSIGN; }
"%="        { yylval.s_val = strdup("REM_ASSIGN"); return REM_ASSIGN; }

"&&"        { yylval.s_val = strdup("LAND"); return LAND; }
"||"        { yylval.s_val = strdup("LOR"); return LOR; }
"!"         { yylval.s_val = strdup("NOT"); return '!'; }

"("         { return '('; }
")"         { return ')'; }
"["         { return '['; }
"]"         { return ']'; }
"{"         { return '{'; }
"}"         { return '}'; }

";"         { return ';'; }
","         { return ','; }
"\n"        { return NEWLINE; }

"print"     { return PRINT; }
"println"   { return PRINTLN; }
"if"        { num_if++; if_flag = 1; if_for_flag = 1; condition_flag = 0; return IF; }
"else"      { else_flag = 1; return ELSE; }
"for"       { num_for++; insert_for(num_for);fprintf(hw3,"for_begin_%d:\n",top_for()); for_flag += 1; if_for_flag = 1; condition_flag = 0; return FOR; }

"int32"     { yylval.s_val = strdup("int32"); return INT; }
"float32"   { yylval.s_val = strdup("float32"); return FLOAT;}
"string"    { yylval.s_val = strdup("string"); return STRING; }
"bool"      { yylval.s_val = strdup("bool"); return BOOL; }
"true"      { yylval.s_val = strdup("TRUE"); return TRUE;}
"false"     { yylval.s_val = strdup("FALSE"); return FALSE;}
"var"       { return VAR;}

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   { yylval.f_val = atof(yytext);
                return FLOAT_LIT;
            }
{Str_lit}        {
    yytext[strlen(yytext)-1] ='\0';
    yylval.s_val = strdup(yytext+1);
    return STR_LIT;
}
{id}        { yylval.s_val = strdup(yytext);
                return ID;
            }

<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                yylineno++;
                state = 1;
                return NEWLINE;
            }
[ \t]+      {;}
.           {;}
%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}